openapi: 3.0.1
info:
  title: Delivery OpenAPI Specification
  contact:
    name: Pesternikov Danil
    url: https://t.me/gnitfihsnwod
    email: danils003@mail.ru
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
paths:
  /api/v1/account:
    put:
      tags:
      - user-account-controller
      description: "Обновление данных пользователя (текущего пользователя, который\
        \ авторизован)"
      operationId: updateUserInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ResponseError'
                - $ref: '#/components/schemas/ProblemDetail'
        "204":
          description: No Content
    delete:
      tags:
      - user-account-controller
      description: Удаление пользователя по id
      operationId: deleteUserByUsername
      parameters:
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ResponseError'
                - $ref: '#/components/schemas/ProblemDetail'
        "204":
          description: No Content
  /api/v1/account/{id}:
    put:
      tags:
      - user-account-controller
      description: Обновление данных пользователя по id
      operationId: updateUserInfoById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ResponseError'
                - $ref: '#/components/schemas/ProblemDetail'
        "204":
          description: No Content
  /api/v1/account/reg:
    post:
      tags:
      - user-account-controller
      description: Регистрация нового пользователя
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ResponseError'
                - $ref: '#/components/schemas/ProblemDetail'
        "201":
          description: Created
  /api/v1/account/auth:
    post:
      tags:
      - user-account-controller
      description: Аутентификация пользователя
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ResponseError'
                - $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenDto'
  /api/v1/account/search:
    get:
      tags:
      - user-account-controller
      description: Поиск по маске
      operationId: searchUsersByMask
      parameters:
      - name: firstName
        in: query
        required: true
        schema:
          type: string
      - name: lastName
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ResponseError'
                - $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUserInfoDto'
components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri
        properties:
          type: object
          additionalProperties:
            type: object
    ResponseError:
      type: object
      properties:
        message:
          type: string
        httpStatus:
          type: string
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 EARLY_HINTS
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        time:
          type: string
          format: date-time
    UserInfoDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        number:
          type: string
        email:
          type: string
    RegisterDto:
      required:
      - email
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 5
          type: string
          description: Имя
        lastName:
          maxLength: 50
          minLength: 5
          type: string
          description: Фамилия
        number:
          maxLength: 20
          minLength: 5
          pattern: "^[0-9]{5,20}$"
          type: string
          description: Номер телефона
          example: "79221110500"
        email:
          type: string
          description: email
          example: email@email.ru
        username:
          maxLength: 255
          minLength: 5
          pattern: "^[a-zA-Z0-9!@#$%^&*()-_=+;:,.<>?]+$"
          type: string
        password:
          maxLength: 255
          minLength: 5
          pattern: "^[a-zA-Z0-9!@#$%^&*()-_=+;:,.<>?]+$"
          type: string
    LoginDto:
      type: object
      properties:
        username:
          type: string
          description: Имя пользователя
          example: admin
        password:
          type: string
          description: Пароль
          example: admin
    TokenDto:
      type: object
      properties:
        subject:
          type: string
        issuedDate:
          type: string
          format: date-time
        expirationTime:
          type: string
          format: date-time
        roles:
          type: array
          items:
            type: string
    PageUserInfoDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserInfoDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT token
      in: header
      scheme: bearer
      bearerFormat: JWT
